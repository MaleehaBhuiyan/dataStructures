• In doubly linked lists, there is one pointer pointing to the next node and another pointer pointing at the previous node

• Although adding a pointer to the previous node is a small change to the code itself, it can make some methods easier.
    EXAMPLES
        1) The pop method: In a singly linked list there is only one way to pop off the last item on the list. We must start from the beginning, find the second to last item and then pop that item off. However, with a doubly linked list, we can work in reverse. We can look at the last item and then word backwards to find the second to last item. 
        2) Reversing a list: reversing a doubly linked list is much easier than reversing a singly linked list. For a singly linked list there is no easy way of reversing it, you make need to store the values in an array and then reverse it for instance. In a doubly linked list you can just look at the .prev values. 

• Doubly linked lists provide more flexibility but it takes up more memory because now we are storing a .next AND .prev 



METHODS:

1) PUSHING: adding a node to the end of a doubly linked list.
        Pseudocode: 
        • create a new node with the value passed to the function 
        • if the head property is null set the head andd tail to be the newly created node
        • if not, set the next property on the tail to be that node
        • set the previous property of the newly created node to be the tail 
        • set the tail to be the newly created node
        • increment the length 
        • return the doubly linked list

2) POPPING: removing a node from the end of the doubly linked list 
        Pseudocode:
        • If there is no head, return undefined
        • Store the current tail in a variable to return later 
        • If the length is 1, set the head and the tail to be null
        • Update the tail to be the previous Node.
        • Set the newTail's next equal to null 
        • Decrement the length 
        • Return the removed value

3) SHIFTING: removing a node from the beginning of the Doubly Linked List 
        Pseudocode:
        • If length is 0, return undefined 
        • Store the current headd property in a variable (we'll call it old head)
        • If the length is one 
                • set the head to be null 
                • set the tail to be null 
        • Update the head to be the next of the old head 
        • Set the head's prev property to null 
        • Decrement the length 
        • Return the old head 

4) UNSHIFTING: adding a node to the beginning of a doubly linked list 
        Pseudocode:
        • Create a new node with the value passed to the function
        • If the length is 0 
                • Set the head to be the new node 
                • Set the tail to be the new node 
        • Otherwise set the previous property on the head of the list to be the new Node
                • Set the prev property on the head of the list to be the new node 
                • Set the next property on the head of the list to be the head property 
                • Update the head to be the new node 
        • Increment the length 
        • Return the list 

5) GET: accessing a node in a Doubly Linked List by its position 
        Pseudocode:
        • If the index is negative or greater than or equal to the length, return null 
        • If the index is less than or equal to half of the length of the list 
                • Loop through the list starting from the head and loop towards the middle 
                • Return the node once it is found 
        • If the index is greater than half od the length of the list 
                • Loop through the list starting from the tail and loop towards the middle 
                • Return the node once it is found 

6) SET: takes an index and a value, updates the node in that index with the value 
        Pseudocode:
        • Create a variable which is the result of the get method at the index passed to the funciton 
                • If the get method returns a valid node, set the value of that node to be the value passedd to the function 
                • Return true 
        • Otherwise return false 

7) INSERT: adding a node in a Doubly Linked List by a certain position
        Pseudocode:
        • If the index is less than zero or greater than or equal to the length return false 
        • If the index is 0, unshift 
        • If the index is the same as the length, push 
        • Use the get method to access the index -1
        • Set the next and prev properties on the correct nodes to link everything together 
        • Increment the length 
        • Return true 

8) REMOVE: Removing a node in a Doubly Linked List by a certain position 
        Pseudocode:
        • If the index is less than zero or greater than or equal to the length return undefined 
        • If the indec is 0, shift 
        • If the index is equal to length-1, pop 
        • Use the get method to retrueve the item to be removed
        • Update the next and prev properties to remve the found node from the list 
        • Set next and prev to null on the found node 
        • Decrement the length 
        • Return the removed node 


Comparing singly linked lists with doubly linked lists: 
       
       • BIG O OF DOUBLY LINKED LISTS 
                • Insertion: O(1) [constant]
                • Removal: O(1) [constant]
                • Searching: O(N) [technically searching is O(N/2), but that's still O(N)... it is more optimized than singly linked lists]
                • Access: O(N) 

        • RECAP:
                • Doubly linked lists are almost identical to Singly Linked lists except there is an additional pointer to previous nodes 
                • Better than Singly Linkedd Lists for finding nodes and can be done in half the time!
                • However, they do take up more memory considerugn the extra pointer 
