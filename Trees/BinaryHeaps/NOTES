Binary Heaps 

• Define what a binary heap is 
    -Very similar to a binary search tree 
    -In a MaxBinaryHeap, parent nodes are always larger than child nodes 
    -In a MinBinaryHeap, parent nodes are always smaller than child nodes 
    -A binary heap is as compact as possible. All the children of each node are as full as they can be 
        • It always taked up the least amount of space as possible
        • So every left and right is filled before we move down 
    -Left children are filled out first 


• Compare and contrast min and max heaps 
    
    - Max Binary Heap:
        • Each parent has at most two child nodes 
        • The value of each parent node is always greater than its child nodes 
        • In a max Binary Heap the parent is greater than the children, but there is no garuntees between sibling nodes
        • Adding to a Binary Heap:
            - add to the end 
            - bubble up 
        • Removing from a heap: 
            - remove the root 
            - replace withthe most recently added 
            - adjust (sink down)

        * INSERT PSEUDOCODE:
            summary:
                - push the value into the values property on the heap 
                - bubble the value up to its correct spot 
            • Push the value into the values property on the heap 
            • Bubble up:
                • Create a variable called index which is the length of the values property - 1
                • Create a variable called parentaiandex which is the floor of (index-1)/2
                • Keep looping as long as the values element at the child index 
                    • Swap the value of the values element at the parentIndex with the value of the element property at the child index 
                    • Set the index to be the parentIndex, and start over! 
        
        * EXTRACTMAX PSEUDOCODE:
            • Swap the first value in the values property with the last one 
            • Pop from the values property, so you can return the value at the end 
            • Have the new root "sink down" to the correct spot...
                • your parent index starts at 0 (the root)
                • find the index of the left child: 2 * index + 1 (make sure it is not out of bounds)
                • find the index of the right child: 2 * index + 2 (make sure it is not out of bounds)
                • If the left or right child is greater than the element...swap. If both left and right children are larger, swap the largest child
                • The child index you swapped to now becomes the new parent index 
                • Keep looping and swapping until neither child is larger than the element 
                • Return the old root 


• Representing a heap:
    - With an array 
        If you have a parent node and want to find its children 
        * For any index of an array n ...
        * The left child is stored at 2n + 1 
        * The right child is at 2n + 2 

        If you have a child node and want to find its parent 
        * For any index of an array n ...
        * (n-1)/2 then floor it 


• Understand where heaps are used in the real world and what other data structures can be constructed from heaps 
    
    - Binary Heaps are used to impelement Priority Queues, which are very commonly used data structures 
        * Priority Queue: 
            - A queue 
            - Where you can assign a priority, an importance level to each item. This will then move its spot in the queue depending on its importance level
            - Elements with higher priorities are served before elements with lower priorities 
            - Priority queues are seperate from heaps, you can use arrays or lists to make a queue but it wont be as good 

            PRIORITY QUEUE PSEUDOCODE
                - Write a Min Binary Heap - lower number means higher priority 
                - Each Node has a val and a priority. Use the priority to build the heap 
                - Enqueue method accepts a value and priority, makes a new node, and puts it in the right spot based off of its priority 
                - Dequeue methos removes root elemnt, returns it, and rearrages heap using priority 

    - Also used with graph traversal algorithms 


• Big O of Binary Heaps 
    Insertion - O(log N)
    Removal - O(log N)
    Search - O(N)


• RECAP
    - Binary heaps are very useful data structuresfor sorting, and impelmenting other data structues like priority queues 
    - Binary Heaps are either MaxBinaryHeaps or MinBinaryHeaps with parent bring either smaller or larger than their children
    - 